import requests
from aiogram import Dispatcher, F, html
import logging
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from setings import API_FOX_URL
from create_bot import bot, dp
from models import yolo, mod
from keyboards import client_kb
from aiogram.fsm.state import State, StatesGroup
from config_data.user_db import add_user, user_check, get_user_name


class FSMClient(StatesGroup):
    name = State()
    age = State()
    photo = State()


user_dict = {}


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=['start']))
async def process_start_command(message: Message, state: FSMContext) -> None:
    user_status = user_check(message.from_user.id)
    if user_status:
        await state.set_state(FSMClient.name)
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:',
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.delete()
        user_dict[message.from_user.id] = {}
    else:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç {get_user_name(message.from_user.id)} üëã'
        )

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel"
@dp.message(Command(commands=['cancel']))
@dp.message(F.text.casefold() == 'cancel')
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    –î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
    """
    del user_dict[message.from_user.id]
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ %r", current_state)
    await state.clear()
    await message.answer(
        '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        reply_markup=ReplyKeyboardRemove(),
    )

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
@dp.message(FSMClient.name)
async def process_name(message: Message, state: FSMContext) -> None:
    user_dict[message.from_user.id]['name'] = message.text
    await state.update_data(name=message.text)
    await message.answer(
        f'–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {html.quote(message.text)}!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:'
    )
    await state.set_state(FSMClient.age)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(FSMClient.age, (lambda message: 4 > int(message.text) < 120))
async def age_warning(message: Message):
    await message.answer(
        '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 4 –¥–æ 120!\n\n'
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
        '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ–∑—Ä–∞—Å—Ç–∞ + –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ user_dict –≤ DB
@dp.message(FSMClient.age, lambda message: message.text.isdigit())
async def process_name(message: Message, state: FSMContext) -> None:
    user_dict[message.from_user.id]['age'] = message.text
    await state.update_data(age=int(message.text))

    await message.answer(
        f'–í–∞—à–µ –ò–º—è: {user_dict[message.from_user.id]["name"]}\n'
        f'–í–∞—à –í–æ–∑—Ä–∞—Å—Ç: {user_dict[message.from_user.id]["age"]}\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    )

    add_user(message.from_user.id, user_dict)
    await state.clear()
    del user_dict[message.from_user.id]


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'rand_fox'
async def process_fox_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –Ω–∞ —Å—á–µ—Ç —Ñ–æ—Ç–æ—á–µ–∫ –ª–∏—Å—ã?', reply_markup=ReplyKeyboardRemove())
    await message.delete()
    fox_response = requests.get(API_FOX_URL)
    ERROR_TEXT: str = '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ª–∏—Å–æ–π :('
    if fox_response.status_code == 200:
        fox_link = fox_response.json()['image']
        await message.answer_photo(fox_link)
    else:
        await message.answer(ERROR_TEXT)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /get_detect
async def photo_detection(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ñ–æ—Ç–∫–∏
async def send_photo_echo(message: Message):
    await message.reply_photo(message.photo[0].file_id)
    file = await bot.get_file(message.photo[-1].file_id)
    file_path = file.file_path
    await bot.download_file(file_path, "./data/test.png")
    yolo.yolo_predict('./data/test.png')
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile("./data/result.png"))
    midas_names = "MiDaS_small"
    mid = mod.MiDas(models_name=midas_names, photo_pth="./data/test.png")
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile("./data/midas.png"))


def regster_handlers_client(dp: Dispatcher):
    # dp.message.register(process_start_command, Command(commands=['start', 'help']))
    dp.message.register(process_fox_command, Command(commands=['rand_fox']))
    dp.message.register(send_photo_echo, F.photo)
