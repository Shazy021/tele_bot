import requests
from aiogram import F, html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, CallbackQuery
from keyboards.client_kb import gender_markup, menu_markup, to_menu
from setings import API_FOX_URL
from create_bot import bot, dp
from models import yolo, mod
from aiogram.fsm.state import State, StatesGroup
from config_data.user_db import add_user, user_check, get_user_name, get_user_age, get_user_gender

user_dict = {}


class FSMRegisterClient(StatesGroup):
    name = State()
    gender = State()
    age = State()
    photo = State()


class FSMImgDetection(StatesGroup):
    img = State()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=['start']))
async def process_start_command(message: Message, state: FSMContext) -> None:
    user_status = user_check(message.from_user.id)
    if user_status:
        await state.set_state(FSMRegisterClient.name)
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:',
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.delete()
        user_dict[message.from_user.id] = {}
    else:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç {get_user_name(message.from_user.id)} üëã',
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            f'–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É üëá',
            reply_markup=menu_markup
        )
        await message.delete()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel"
@dp.message(Command(commands=['cancel']))
@dp.message(F.text.casefold() == 'cancel')
async def cancel_handler(message: Message, state: FSMContext) -> None:
    global user_dict
    user_dict = {}

    await state.clear()
    await message.answer(
        '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        reply_markup=to_menu,
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
@dp.message(FSMRegisterClient.name)
async def process_name(message: Message, state: FSMContext) -> None:
    user_dict[message.from_user.id]['name'] = message.text
    await state.update_data(name=message.text)
    await message.answer(
        f'–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {html.quote(message.text)}!'
    )
    await message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(text=f'–°–ø–∞—Å–∏–±–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
                         reply_markup=gender_markup)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    await state.set_state(FSMRegisterClient.gender)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(FSMRegisterClient.gender)
async def warning_not_gender(message: Message):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                              '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                              '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–ª–æ–≤ –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@dp.message(FSMRegisterClient.gender)
@dp.callback_query(lambda callback: callback.data in ['male', 'female', 'undefined_gender'])
async def process_gender_press(callback: CallbackQuery, state: FSMContext):
    # C –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª (callback.data –Ω–∞–∂–∞—Ç–æ–π
    # –∫–Ω–æ–ø–∫–∏) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ –∫–ª—é—á—É "gender"
    user_dict[callback.from_user.id]["gender"] = str(callback.data)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
    # —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.delete()
    await callback.message.answer(text='–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ '
                                       '—Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await state.set_state(FSMRegisterClient.age)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(FSMRegisterClient.age, (lambda message: not (message.text.isdigit()) or (4 > int(message.text) < 120)))
async def age_warning(message: Message):
    await message.answer(
        '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 4 –¥–æ 120!\n\n'
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
        '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ–∑—Ä–∞—Å—Ç–∞ + –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ user_dict –≤ DB
@dp.message(FSMRegisterClient.age, lambda message: message.text.isdigit())
async def process_name(message: Message, state: FSMContext) -> None:
    user_dict[message.from_user.id]['age'] = message.text
    await state.update_data(age=int(message.text))

    await message.answer(
        f'–í–∞—à–µ –ò–º—è: {user_dict[message.from_user.id]["name"]}\n'
        f'–í–∞—à –í–æ–∑—Ä–∞—Å—Ç: {user_dict[message.from_user.id]["age"]}\n'
        f'–í–∞—à –ü–æ–ª: {user_dict[message.from_user.id]["gender"]}\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    )
    await message.delete()

    add_user(message.from_user.id, user_dict)
    await state.clear()
    del user_dict[message.from_user.id]


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ callback —Å –º–µ–Ω—é 'rand_fox'
@dp.callback_query(lambda callback: callback.data in ['/rand_fox'])
async def process_fox_command(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–î–µ—Ä–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ–æ—Ç–æ—á–∫—É –ª–∏—Å—ã', reply_markup=ReplyKeyboardRemove())
    fox_response = requests.get(API_FOX_URL)
    ERROR_TEXT: str = '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ª–∏—Å–æ–π :('
    if fox_response.status_code == 200:
        fox_link: str = fox_response.json()['image']  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
        await callback.message.answer_photo(fox_link, reply_markup=to_menu)
    else:
        await callback.message.answer(ERROR_TEXT)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /get_detect
@dp.callback_query(lambda callback: callback.data in ['/img_detection'])
async def photo_detection(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

    await state.set_state(FSMImgDetection.img)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ñ–æ—Ç–∫–∏ –ø—Ä–∏—à–µ–¥—à–∏–µ c /img_detection
@dp.message(FSMImgDetection.img, F.photo)
async def send_photo_echo(message: Message, state: FSMContext):
    await message.reply_photo(message.photo[0].file_id)
    file = await bot.get_file(message.photo[-1].file_id)
    file_path = file.file_path
    await bot.download_file(file_path, "./data/test.png")
    yolo.yolo_predict('./data/test.png')
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile("./data/result.png"))
    midas_names = "MiDaS_small"
    mod.MiDas(models_name=midas_names, photo_pth="./data/test.png")
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile("./data/midas.png"), reply_markup=to_menu)
    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message(FSMImgDetection.img)
async def warning_not_gender(message: Message):
    await message.delete()
    await message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï!!!'
        '\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
        '–∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query(lambda callback: callback.data in ['/show_user_info'])
async def user_info(callback: CallbackQuery):
    await callback.message.delete()
    user_id = callback.from_user.id
    name, age, gender = get_user_name(user_id), get_user_age(user_id), get_user_gender(user_id)

    await callback.message.answer(
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {name}:\n\n'
        f'–í–æ–∑—Ä–∞—Å—Ç: {age}\n'
        f'–ü–æ–ª: {gender}\n\n'
        f'–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
        reply_markup=to_menu
    )
